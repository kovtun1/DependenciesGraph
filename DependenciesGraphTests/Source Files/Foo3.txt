import Cocoa

protocol UserRepresentable {
  var firstName : String { get }
  var lastName  : String { get }
}

private struct User: UserRepresentable {
  let firstName : String
  let lastName  : String
}

protocol UserFirstNameChangable {
  func changeFirstName(user: UserRepresentable, newFirstName: String) -> UserRepresentable
}

protocol UserLastNameChangable {
  func changeLastName(user: UserRepresentable, newLastName: String) -> UserRepresentable
}

protocol UserManagable: UserFirstNameChangable, UserLastNameChangable {}

private class UserManager: UserManagable {
  private let userFirstNameChanger : UserFirstNameChangable
  private let userLastNameChanger  : UserLastNameChangable
  
  internal init(
    userFirstNameChanger : UserFirstNameChangable,
    userLastNameChanger  : UserLastNameChangable
  ) {
    self.userFirstNameChanger = userFirstNameChanger
    self.userLastNameChanger = userLastNameChanger
  }
  
  func changeFirstName(user: UserRepresentable, newFirstName: String) -> UserRepresentable {
    return self.userFirstNameChanger.changeFirstName(user: user, newFirstName: newFirstName)
  }
  
  func changeLastName(user: UserRepresentable, newLastName: String) -> UserRepresentable {
    return self.userLastNameChanger.changeLastName(user: user, newLastName: newLastName)
  }
}

private class UserFirstNameChanger: UserFirstNameChangable {
  func changeFirstName(user: UserRepresentable, newFirstName: String) -> UserRepresentable {
    let newUser: UserRepresentable = User(firstName: newFirstName, lastName: user.lastName)
    
    return newUser
  }
}

private class UserLastNameChanger: UserLastNameChangable {
  func changeLastName(user: UserRepresentable, newLastName: String) -> UserRepresentable {
    let newUser: UserRepresentable = User(firstName: user.firstName, lastName: newLastName)
    
    return newUser
  }
}
